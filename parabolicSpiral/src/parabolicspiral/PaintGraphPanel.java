/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package parabolicspiral;

import java.awt.Color;
import java.awt.Graphics;

/**
 *
 * @author VADIM
 */
public class PaintGraphPanel extends javax.swing.JPanel {

    private int segmentation, nx, indent_y , oyk, oyx, indent_x , oxk, oxy, lenght_y, lenght_x, sw, xln, l2;
    private float xng, kx, ky, hx, yg, xk;

    /**
     * Creates new form PaintGraphPanel
     */
    public PaintGraphPanel() {
        initComponents();
        segmentation = 20;// цена деления  по шкалам
        ky = (float) 0.5; // коэф шкалы по у
        kx = (float) 0.5; // коэф шкалы по x
        indent_y = 0; // начальный отступ по y
        indent_x = 0; //начальный отступ по х
        lenght_y = 500 - 10; // длина оси у
        lenght_x = 900 - 10; // длина оси х

        hx = (float) 0.011;//шаг табуляции
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        //Разбиваем каждую ось на две части для удобства переноса центра координат
        // Ось Y
        g.drawLine((int) (lenght_x * kx + indent_x ), indent_y ,
                (int) (lenght_x * kx + indent_x ), lenght_y + indent_y );
        // Стрелки
        g.drawLine((int) (lenght_x * kx + indent_x ), indent_y ,
                (int) (lenght_x * kx + indent_x ) - 3, indent_y  + 10);
        g.drawLine((int) (lenght_x * kx + indent_x ), indent_y ,
                (int) (lenght_x * kx + indent_x ) + 3, indent_y  + 10);
        // Надпись
        g.drawString("Y", (int) (lenght_x * kx + indent_x ) - 10, indent_y  + 10);
        g.drawString("0", (int) (lenght_x * kx + indent_x ) - 10, (int) (lenght_y * ky + indent_y ) + 10);
        //Деления
        int l1 = (int) (lenght_y * ky);
        l2 = lenght_y - l1;
        int k1 = (int) l1 / segmentation;
        int k2 = (int) l2 / segmentation;
        for (int i = 1; i < k1 + 1; i++) {
            g.drawLine((int) (lenght_x * kx - 2 + indent_x ), l1 - segmentation + indent_y ,
                   (int) (lenght_x * kx + 2 + indent_x ), l1 - segmentation + indent_y );
            l1 = l1 - segmentation;
        }
        l1 = lenght_y - l2;
        for (int i = 1; i < k2 + 1; i++) {
            g.drawLine((int) (lenght_x * kx - 2 + indent_x ), l1 + segmentation + indent_y ,
                    (int) (lenght_x * kx + 2 + indent_x ), l1 + segmentation + indent_y );
            l1 = l1 + segmentation;
        }
        // Ось Х
        g.drawLine(indent_x , (int) (lenght_y * ky + indent_y ), lenght_x + indent_x , (int) (lenght_y * ky + indent_y ));
        g.drawLine(lenght_x + indent_x , (int) (lenght_y * ky + indent_y ), lenght_x + indent_x  - 10,
                (int) (lenght_y * ky + indent_y ) - 3);
        g.drawLine(lenght_x + indent_x , (int) (lenght_y * ky + indent_y ), lenght_x + indent_x  - 10,
                (int) (lenght_y * ky + indent_y ) + 3);
        // Надпись
        g.drawString("Х", lenght_x + indent_y  - 10, (int) (lenght_y * ky + indent_y ) - 10);
        // Деления
        l1 = (int) (lenght_x * kx);
        l2 = lenght_x - l1;
        k1 = (int) l1 / segmentation;
        k2 = (int) l2 / segmentation;
        for (int i = 1; i < k1 + 1; i++) {
            g.drawLine(l1 - segmentation + indent_x , (int) (lenght_y * ky - 2 + indent_y ),
                    l1 - segmentation + indent_x , (int) (lenght_y * ky + 2 + indent_y ));
            l1 = l1 - segmentation;
        }
        l1 = lenght_x - l2;
        double xl = l1 / segmentation;
        double xl1 = l2 / segmentation;
        for (int i = 1; i < k2 + 1; i++) {
            g.drawLine(l1 + segmentation + indent_x , (int) (lenght_y * ky - 2 + indent_y ),
                    l1 + segmentation + indent_x , (int) (lenght_y * ky + 2 + indent_y ));
            l1 = l1 + segmentation;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setMaximumSize(new java.awt.Dimension(900, 500));
        setMinimumSize(new java.awt.Dimension(900, 500));
        setPreferredSize(new java.awt.Dimension(900, 500));
        setLayout(new java.awt.GridLayout());
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
